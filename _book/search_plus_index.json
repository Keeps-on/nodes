{"./":{"url":"./","title":"前言","keywords":"","body":"前言 个人学习笔记整理文档 Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-05 15:09:26 var className='atoc';"},"Linux/introduce.html":{"url":"Linux/introduce.html","title":"Linux","keywords":"","body":"Linux 系统初始化 常用指令 Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-03 13:35:16 var className='atoc';"},"Linux/system_init.html":{"url":"Linux/system_init.html","title":"系统初始化","keywords":"","body":" 命令提示符 优化yum源 防火墙 CentOS6 CentOS7 关闭selinux服务 字符编码设置 CentOS6 CentOS7 命令提示符 根据不同的颜色显示命令提示符 一、编辑配置文件 vim /etc/profile export PS1='[\\[\\e[32;1m\\]\\u@\\[\\e[33;1m\\]\\h\\[\\e[34;1m\\] \\W\\[\\e[0m\\]]\\$ ' 二、加载配置文件 source /etc/profile 三、常见的颜色 export PS1='\\[\\e[30;1m\\][\\u@\\h \\W]\\\\$ \\[\\e[0m\\]' -- 黑色提示符 export PS1='\\[\\e[31;1m\\][\\u@\\h \\W]\\\\$ \\[\\e[0m\\]' -- 红色提示符 export PS1='\\[\\e[32;1m\\][\\u@\\h \\W]\\\\$ \\[\\e[0m\\]' -- 绿色提示符 export PS1='\\[\\e[33;1m\\][\\u@\\h \\W]\\\\$ \\[\\e[0m\\]' -- 黄色提示符 export PS1='\\[\\e[34;1m\\][\\u@\\h \\W]\\\\$ \\[\\e[0m\\]' -- 蓝色提示符 export PS1='\\[\\e[35;1m\\][\\u@\\h \\W]\\\\$ \\[\\e[0m\\]' -- 粉色提示符 export PS1='\\[\\e[36;1m\\][\\u@\\h \\W]\\\\$ \\[\\e[0m\\]' -- 浅蓝提示符 export PS1='\\[\\e[37;1m\\][\\u@\\h \\W]\\\\$ \\[\\e[0m\\]' -- 白色提示符 四、命令提示如的表达式说明 序号 参数 含义 1 \\d 代表日期，格式为weekday month date 2 \\H 完整的主机名称 3 \\h 仅主机的第一个名字（默认） 4 \\t 显示时间为24小时格式，如HH:MM:SS 5 \\T 显示时间12小时格式 6 \\A 显示时间24小时格式 7 \\u 当前用户的账户名称（默认） 8 \\v BASH的版本信息 9 \\w 完整的工作目录名称。家目录会以~显示（默认） 10 \\W 利用basename取得工作目录名称，所以只会列出最后一个目录 11 \\# 下达的第几个命令 12 \\ 提示字符，如果是root时，提示符为 # , 普通用户则为 $ 优化yum源 一、常见yum源 阿里源 1. 备份 mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 2. 下载 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 或者 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 清华源 1. 备份 sudo cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak 2. 替换 /etc/yum.repos.d/CentOS-Base.repo # 小技巧 vim d + G 删除全部 网易源 1. 备份 mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 2. 下载对应版本repo文件, 放入/etc/yum.repos.d/(操作前请做好相应备份) http://mirrors.163.com/.help/CentOS7-Base-163.repo 二、Epel源 1. 备份 mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup 2. 下载新repo 到/etc/yum.repos.d/ wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo 3. 检查epel扩展源 yum repolist 三、常见的工具软件安装 yum clean all yum makecache yum install -y vim tree wget net-tools nmap bash-completion（补全centos7的部分命令参数） 防火墙 CentOS6 查看状态 /etc/init.d/iptables status 永久关闭 chkconfig iptables off 临时关闭 /etc/init.d/iptables stop /etc/init.d/iptables status CentOS7 查看状态 systemctl status firewalld 永久关闭 systemctl disable firewalld 临时关闭 systemctl stop firewalld systemctl status firewalld -- 操作完确认 简单方法 systemctl is-active firewalld --- 检查服务是否正常运行 systemctl is-enabled firewalld --- 检查确认服务是否开机运行 关闭selinux服务 selinux服务对root用户权限设置 一、查看转态 getenforce --- 确认selinux服务是否开启或是关闭的 二、临时关闭 setenforce usage: setenforce [ Enforcing | Permissive | 1 | 0 ] Enforcing 1 --- 临时开启selinux Permissive 0 --- 临时关闭selinux setenforce 0 --- 临时关闭selinux服务 三、永久关闭 enforcing - SELinux security policy is enforced. selinux服务处于正常开启状态 permissive - SELinux prints warnings instead of enforcing. selinux服务被临时关闭了 disabled - No SELinux policy is loaded. selinux服务彻底关闭 vi /etc/selinux/config SELINUX=disabled PS: 如果想让selinux配置文件生效,重启系统 [ ] 使用 sed 完成关闭 selinux 字符编码设置 CentOS6 查看字符集 echo $LANG --- LANG用于设置字符编码信息 en_US.UTF-8 临时修改 echo $LANG en_US.UTF-8 LANG=XXX 永久修改 方法一 tail -5 /etc/profile export LANG='en_US.UTF-8' 方法二 vi /etc/sysconfig/i18n LANG='en_US.UTF-8 source /etc/sysconfig/i18n CentOS7 查看字符集 echo $LANG en_US.UTF-8 临时修改 echo $LANG en_US.UTF-8 LANG=XXX 永久修改 方法一 tail -5 /etc/profile export LANG='en_US.UTF-8' 方法二 cat /etc/locale.conf LANG=\"zh_CN.UTF-8\" 一条命令即临时设置，又永久设置 localectl set-locale LANG=zh_CN.GBK Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-03 10:42:03 var className='atoc';"},"Linux/cmd.html":{"url":"Linux/cmd.html","title":"常用指令","keywords":"","body":" 常用命令 一、快捷方式 中断命令执行操作过程 清屏操作 注销功能 快速将光标移动到行首 快速将光标移动到行尾 按照一个英文单词进行移动光标 将上一个命令最后一个信息进行调取 光标所在位置到行首内容进行删除（剪切） 光标所在位置到行尾内容进行删除（剪切） 粘贴剪切的内容 xshell进入到了锁定状态 解除锁定状态 快速搜索历史命令 二、常用命令 tar tar .tar.gz 和 .tgz rpm 查看软件是否安装 查看软件包中有哪些信息 查询软件中有哪些配置文件 查看文件信息属于哪个软件 ln 创建软连接 软连接的删除 netstat netstat命令用于显示各种网络相关信息 查看网卡列表 查看一个端口是否被打开 显示监听的端口 查看指定程序的端口 显示PID和进程名称 显示监听的端口 rz/sz 上传文件 下载文件 lsof 常用命令 一、快捷方式 中断命令执行操作过程 ctrl+c 清屏操作 ctrl+l 注销功能 ctrl+d 快速将光标移动到行首 ctrl+a 快速将光标移动到行尾 ctrl+e 按照一个英文单词进行移动光标 ctrl+左右方向键 将上一个命令最后一个信息进行调取 esc+. 光标所在位置到行首内容进行删除（剪切） ctrl+u 光标所在位置到行尾内容进行删除（剪切） ctrl+k 粘贴剪切的内容 ctrl+y xshell进入到了锁定状态 ctrl+s 解除锁定状态 ctrl+q 快速搜索历史命令 ctrl+r 二、常用命令 tar 必要参数有如下： -A 新增压缩文件到已存在的压缩 -B 设置区块大小 -c 建立新的压缩文件 -d 记录文件的差别 -r 添加文件到已经压缩的文件 -u 添加改变了和现有的文件到已经存在的压缩文件 -x 从压缩的文件中提取文件 -t 显示压缩文件的内容 -z 支持gzip解压文件 -j 支持bzip2解压文件 -Z 支持compress解压文件 -v 显示操作过程 -l 文件系统边界设置 -k 保留原有文件不覆盖 -m 保留文件不被覆盖 -W 确认压缩文件的正确性 可选参数如下： -b 设置区块数目 -C 切换到指定目录 -f 指定压缩文件 –help 显示帮助信息 –version 显示版本信息 tar 解包：tar xvf FileName.tar 打包：tar cvf FileName.tar DirName （注：tar是打包，不是压缩！） .tar.gz 和 .tgz 解压 tar zxvf FileName.tar.gz 压缩 tar zcvf FileName.tar.gz DirName gz 解压1：gunzip FileName.gz 解压2：gzip -d FileName.gz 压缩：gzip FileName .bz2 解压1：bzip2 -d FileName.bz2 解压2：bunzip2 FileName.bz2 压缩： bzip2 -z FileName .tar.bz2 解压：tar jxvf FileName.tar.bz2 压缩：tar jcvf FileName.tar.bz2 DirName .bz 解压1：bzip2 -d FileName.bz 解压2：bunzip2 FileName.bz 压缩：未知 .tar.bz 解压：tar jxvf FileName.tar.bz 压缩：未知 .Z 解压：uncompress FileName.Z 压缩：compress FileName .tar.Z 解压：tar Zxvf FileName.tar.Z 压缩：tar Zcvf FileName.tar.Z DirName .zip 解压：unzip FileName.zip 压缩：zip FileName.zip DirName .rar 解压：rar x FileName.rar 压缩：rar a FileName.rar DirName rpm 查看软件是否安装 rpm -qa sl -q:表示查询 query -a:表示所有 all 查看软件包中有哪些信息 rpm -ql ansible -l:表示列表显示 查询软件中有哪些配置文件 rpm -qc anlible -c:查询程序的配置文件 查看文件信息属于哪个软件 which ssh /usr/bin/ssh rpm -qf /usr/bin/ssh # 组合使用 rpm -qf `which ssh` openssh-clients-7.4p1-16.el7.x86_64 ln ln -s 原始文件的目录 快捷方式的目录以及名字 创建软连接 ln -s /opt/redis_cluster/redis-3.2.9/ /opt/redis_cluster/redis 软连接的删除 正确的删除方式（删除软链接，但不删除实际数据） rm -rf ./djdemo 注意： rm -rf ./djdemo/ (此时也会将软连接对应的数据删除) netstat yum install net-tools -y netstat命令用于显示各种网络相关信息 netstat -antlp | grep redis -a:(all)显示所有选项，netstat默认不显示LISTEN相关 -t:(tcp)仅显示tcp相关选项 -u:(udp)仅显示udp相关选项 -n:拒绝显示别名，能显示数字的全部转化成数字 -l：仅列出所有在 Listen (监听) 的服务状态 查看网卡列表 netstat –i 查看一个端口是否被打开 netstat -an | grep 23 显示监听的端口 netstat -l 查看指定程序的端口 netstat -apn | grep ssh 显示PID和进程名称 netstat -pt 显示监听的端口 netstat -l rz/sz yum install lrzsz -y 上传文件 rz 下载文件 sz file lsof yum install lsof -y 查看端口占用 lsof -i:9200 # 查看端口占用 Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-03 13:35:02 var className='atoc';"},"Zabbix/introduce.html":{"url":"Zabbix/introduce.html","title":"Zabbix","keywords":"","body":"Zabbix 监控项 概念：你所要的监控的内容 模板 概念：将一类的监控项汇总在一起，单独保存成一个集合，可以被其他主机调用 应用集 概念：对模板中的一类的监控项的集合 agent 概念：客户端，监控的主机 键值 概念：监控项目名称：监控项目返回的值 触发器 概念：设定某个监控项告警的阈值 图形 概念：监控项的趋势 聚合图形 概念：将多个监控项的图形进行汇总展示 Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-04 00:37:30 var className='atoc';"},"Zabbix/install.html":{"url":"Zabbix/install.html","title":"安装","keywords":"","body":"安装 mast服务端 yum源 rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm sed -i 's#repo.zabbix.com#mirrors.tuna.tsinghua.edu.cn/zabbix#g' /etc/yum.repos.d/zabbix.repo rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/3.4/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm -- 老版本不推荐使用 zabbix服务端相关软件 zabbix服务程序软件: zabbix-server-mysql zabbix服务web软件: zabbix-web-mysql httpd php 数据库服务软件: mariadb-server yum install -y zabbix-server-mysql zabbix-web-mysql httpd php mariadb-server zabbix-agent 软件配置 vim /etc/zabbix/zabbix_server.conf grep \"^[a-Z]\" /etc/zabbix/zabbix_server.conf DBHost=localhost DBName=zabbix DBUser=zabbix DBPassword=zabbix 配置 Apache 的配置文件/etc/httpd/conf.d/zabbix.conf，修改时区 vim /etc/httpd/conf.d/zabbix.conf php_value date.timezone Asia/Shanghai 数据库的配置 systemctl start mariadb.service systemctl enable mariadb.service 创建zabbix数据库--zabbix # 设置数据库的初始密码 mysqladmin password 123456 mysql -uroot -p123456 # 创建zabbix库 create database zabbix character set utf8 collate utf8_bin; grant all privileges on zabbix.* to zabbix@localhost identified by 'zabbix'; flush privileges; 在zabbix数据库中导入相应的表信息 zcat /usr/share/doc/zabbix-server-mysql-4.0.20/create.sql.gz | mysql -uzabbix -pzabbix zabbix 启动相关服务 systemctl start zabbix-server.service httpd mariadb.service systemctl enable zabbix-server.service httpd mariadb.service 登录zabbix服务端web界面, 进行初始化配置 http://10.0.0.71/zabbix/setup.php 10051 zabbix-server 服务端端口号 10050 zabbix-agent 客户端端口号 /etc/zabbix/web/zabbix.conf.php -- 记录web页面初始化信息 设置中文 中文乱码 解决方法:安装字体并替换现有字体 yum install wqy-microhei-fonts -y cp /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /usr/share/zabbix/assets/fonts/graphfont.ttf 刷新 agent yum源 rpm -ivh https://mirror.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-agent-4.0.11-1.el7.x86_64.rpm 配置zabbix-agent grep \"^[a-Z]\" /etc/zabbix/zabbix_agentd.conf PidFile=/var/run/zabbix/zabbix_agentd.pid LogFile=/var/log/zabbix/zabbix_agentd.log LogFileSize=0 Server=192.168.8.10 ServerActive=192.168.8.10 Hostname=Zabbix server 启动zabbix-agent并检查 systemctl start zabbix-agent.service systemctl enable zabbix-agent.service netstat -lntup|grep 10050 tcp 0 0 0.0.0.0:10050 0.0.0.0:* LISTEN 16145/zabbix_agentd tcp6 0 0 :::10050 :::* LISTEN 16145/zabbix_agentd zabbix-get检查测试(mast) yum install zabbix-get -y zabbix_get -s 192.168.8.11 -k system.cpu.util[,idle] 99.899866 # 当有返回值的时候表示添加成功 Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-04 00:37:33 var className='atoc';"},"Zabbix/config.html":{"url":"Zabbix/config.html","title":"配置","keywords":"","body":"添加主机 Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-04 00:37:35 var className='atoc';"},"Zabbix/monitor.html":{"url":"Zabbix/monitor.html","title":"监控项","keywords":"","body":"自定义监控项 获取TCP连接状态的值 netstat -ant|awk 'NR>2{print $6}'|grep \"TIME_WAIT\"|wc -l 设置自定义监控项的格式 cd /etc/zabbix/zabbix_agentd.d/ # 官方示例 UserParameter=mysql.ping,HOME=/var/lib/zabbix mysqladmin ping | grep -c alive mysql.ping # 监控项键名称 mysqladmin ping | grep -c alive # 取值的命令 在指定目录下创建监控项 vim /etc/zabbix/zabbix_agentd.d/tcp_status.conf UserParameter=TIME_WAIT,netstat -ant|awk 'NR>2{print $6}'|grep \"TIME_WAIT\"|wc -l UserParameter=LISTEN,netstat -ant|awk 'NR>2{print $6}'|grep \"LISTEN\"|wc -l UserParameter=ESTABLISHED,netstat -ant|awk 'NR>2{print $6}'|grep \"ESTABLISHED\"|wc -l 测试 zabbix_get -s 192.168.8.11 -k TIME_WAIT 28 配置监控项 监控项克隆 设置触发器 [TOC] Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-04 00:37:32 var className='atoc';"},"Zabbix/pic.html":{"url":"Zabbix/pic.html","title":"图形","keywords":"","body":"图形 聚合图形 Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-04 00:37:36 var className='atoc';"},"Zabbix/template.html":{"url":"Zabbix/template.html","title":"模板","keywords":"","body":"模版 创建模板 模板添加监控项 模板添加触发器 模板添加图形 模板关联主机 Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-04 00:37:31 var className='atoc';"},"Zabbix/action.html":{"url":"Zabbix/action.html","title":"动作","keywords":"","body":"邮件发送通知 配置发送邮箱的设置 配置接收邮箱的设置 发送警告 报警邮件标题可以使用默认信息，亦可使用如下中文报警内容 名称：Action-Email 默认标题：故障{TRIGGER.STATUS},服务器:{HOSTNAME1}发生: {TRIGGER.NAME}故障! 告警主机:{HOSTNAME1} 告警时间:{EVENT.DATE} {EVENT.TIME} 告警等级:{TRIGGER.SEVERITY} 告警信息: {TRIGGER.NAME} 告警项目:{TRIGGER.KEY1} 问题详情:{ITEM.NAME}:{ITEM.VALUE} 当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1} 事件ID:{EVENT.ID} 恢复警告 恢复标题：恢复{TRIGGER.STATUS}, 服务器:{HOSTNAME1}: {TRIGGER.NAME}已恢复! 恢复信息： 告警主机:{HOSTNAME1} 告警时间:{EVENT.DATE} {EVENT.TIME} 告警等级:{TRIGGER.SEVERITY} 告警信息: {TRIGGER.NAME} 告警项目:{TRIGGER.KEY1} 问题详情:{ITEM.NAME}:{ITEM.VALUE} 当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1} 事件ID:{EVENT.ID} Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-04 09:26:05 var className='atoc';"},"Ansible/introduce.html":{"url":"Ansible/introduce.html","title":"Ansible","keywords":"","body":"Ansible Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-04-30 19:54:22 var className='atoc';"},"Ansible/install.html":{"url":"Ansible/install.html","title":"安装","keywords":"","body":" 安装与配置 安装 配置 配置文件说明 配置主机清单 密钥对验证 批量分发公钥 安装与配置 安装 yum install -y ansible --- 需要依赖epel的yum源 配置 配置文件说明 /etc/ansible/ansible.cfg --- ansible服务配置文件 /etc/ansible/hosts --- 主机清单文件 定义可以管理的主机信息 /etc/ansible/roles --- 角色目录 配置主机清单 文件位置：/etc/ansible/hosts jkj 密钥对验证 主控端生成密钥对 ssh-keygen -t 秘钥的类型(dsa|rsa) 管理端接收公钥 ssh-copy-id -i /root/.ssh/id_dsa.pub root@192.168.8.105 注意：指定用户root如果不指定以当前用户 批量分发公钥 下载安装sshpass yum install -y sshpass 执行免交互方式分发公钥命令 sshpass -p123456 ssh-copy-id -i /root/.ssh/id_dsa.pub root@172.16.1.41 不要输入连接yes或no的确认信息 ssh-copy-id -i /root/.ssh/id_dsa.pub root@172.16.1.41 \"-o StrictHostKeyChecking=no\" 服务端口号发生变化 sshpass -p123456 ssh-copy-id -i /root/.ssh/id_dsa.pub root@172.16.1.41 -p 52113 \"-o StrictHostKeyChecking=no\" 脚本 #!/bin/bash for ip in {1..100} do sshpass -p123456 ssh-copy-id -i /root/.ssh/id_dsa.pub root@172.16.1.$ip \"-o StrictHostKeyChecking=no\" &>/dev/null done 分发公钥检查脚本(批量管理脚本) --- 串型批量管理 #!/bin/bash CMD=$1 for ip in {7,31,41} do ssh 172.16.1.$ip $CMD done Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-03 17:18:39 var className='atoc';"},"Ansible/config.html":{"url":"Ansible/config.html","title":"配置","keywords":"","body":"config.md Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-02 09:45:14 var className='atoc';"},"Ansible/models.html":{"url":"Ansible/models.html","title":"模块","keywords":"","body":" 常用模块 command chdir creates removes free_form shell scripts copy file yum 常用模块 command 基本使用 ansible docker -m command -a \"mkdir -p /data/es_soft/\" 注意：有些符号信息无法识别: \", \"|\", \";\" and \"&\" chdir 在执行命令之前对目录进行切换 ansible docker -m command -a \"chdir=/data/es_soft rpm -ivh elasticsearch-6.6.0.rpm\" creates 如果文件存在了,不执行命令操作 ansible docker -m command -a \"creates=/tmp/hosts touch test.txt\" removes 如果文件存在了,这个步骤将执行 ansible docker -m command -a \"removes=/tmp/hosts chdir=/tmp touch test.txt\" free_form 使用command模块的时候,-a参数后面必须写上一个合法linux命令信息 The command module takes a free form command to run. There is no parameter actually named 'free form'. See the examples! 使用command模块的时候,-a参数后面必须写上一个合法linux命令信息 shell scripts copy 将数据信息进行批量分发 ansible docker -m copy -a \"src=/data/elasticsearch-6.6.0.rpm dest=/data/elasticsearch-6.6.0.rpm\" file yum Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-03 17:21:07 var className='atoc';"},"ES/introduce.html":{"url":"ES/introduce.html","title":"ES","keywords":"","body":"Elasticsearch Elasticsearch 是一个实时的分布式搜索分析引擎， 它能让你以一个之前从未有过的速度和规模，去探索你的数据。 它被用作全文检索、结构化搜索、分析以及这三个功能的组合；Elasticsearch是一个基于Apache Lucene的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。 但是，Lucene只是一个库。想要使用它，你必须使用Java来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。 Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。mysql虽然也可以搜索，比如查询某个字符串%，需要全表扫描 Elasticsearch非常适合全文检索；可以灵活的存储不同类型的数据；应用场景：商城的商品搜索、所有产品的评论，高亮显示搜索内容，收集展示各种日志 Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-05 15:15:03 var className='atoc';"},"ES/install.html":{"url":"ES/install.html","title":"安装","keywords":"","body":"安装 Elasticsearch是基于Java开发所以第一步安装Java yum install -y java-1.8.0-openjdk.x86_64 下载并安装 mkdir -p /data/es_soft/ cd /data/es_soft/ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.6.0.rpm rpm -ivh elasticsearch-6.6.0.rpm 启动服务 systemctl daemon-reload systemctl enable elasticsearch.service systemctl start elasticsearch.service systemctl status elasticsearch.service curl 127.0.0.1:9200 { \"name\" : \"o-nKKSr\", \"cluster_name\" : \"elasticsearch\", \"cluster_uuid\" : \"ige0b_ybQuC6YdKBTN2sQw\", \"version\" : { \"number\" : \"6.6.0\", \"build_flavor\" : \"default\", \"build_type\" : \"rpm\", \"build_hash\" : \"a9861f4\", \"build_date\" : \"2019-01-24T11:27:09.439740Z\", \"build_snapshot\" : false, \"lucene_version\" : \"7.6.0\", \"minimum_wire_compatibility_version\" : \"5.6.0\", \"minimum_index_compatibility_version\" : \"5.0.0\" }, \"tagline\" : \"You Know, for Search\" } Elasticsearch默认端口9200 ps -ef|grep elastic lsof -i:9200 注意事项： 锁定内存要修改配置 JVM虚拟机最大最小内存设置为一样 最大内存不要超过30G 更改数据目录需要授权用户给elasticsearch es启动比较慢 Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-05 15:15:51 var className='atoc';"},"ES/config.html":{"url":"ES/config.html","title":"配置","keywords":"","body":"配置 rpm -ql elasticsearch #查看elasticsearch软件安装了哪些目录 rpm -qc elasticsearch #查看elasticsearch的所有配置文件 /etc/elasticsearch/elasticsearch.yml #配置文件 /etc/elasticsearch/jvm.options. #jvm虚拟机配置文件 /etc/init.d/elasticsearch #init启动文件 /etc/sysconfig/elasticsearch #环境变量配置文件 /usr/lib/sysctl.d/elasticsearch.conf #sysctl变量文件，修改最大描述符 /usr/lib/systemd/system/elasticsearch.service #systemd启动文件 /var/lib/elasticsearch #数据目录 /var/log/elasticsearch #日志目录 /var/run/elasticsearch #pid目录 配置文件 默认配置文件 grep \"^[a-Z]\" /etc/elasticsearch/elasticsearch.yml node.name: node-1 # 节点名称 network.host: 192.168.8.16,127.0.0.1 http.port: 9200 bootstrap.memory_lock: true # 内存锁定 path.data: /var/lib/elasticsearch # 默认存储数据的目录 path.logs: /var/log/elasticsearch # 日志 数据目录的修改 # 查看elasticsearch所有的用户 cat /etc/passwd elasticsearch:x:997:995:elasticsearch user:/nonexistent:/sbin/nologin # 修改数据目录权限 chown -R elasticsearch:elasticsearch /data/elasticsearch/ 内存限制 vim /etc/elasticsearch/jvm.options # 内存相关的配置 -Xms1g # 最小占用内存 -Xmx1g # 最大占用内存 说明：当elasticsearch启动的时候会最大最小占用的内存； 官方建议 1. 不要超过32G，当你的内存超过32G不仅性能不会提升，反而会下降 2. 最大最小内存设置为一样 3. 配置文件设置锁定内存 bootstrap.memory_lock: true 4. 至少给你服务器本身空余50%的内存 启动报错 查看日志如果内存锁定失败 https://www.elastic.co/guide/en/elasticsearch/reference/6.6/setup-configuration-memory.html https://www.elastic.co/guide/en/elasticsearch/reference/6.6/setting-system-settings.html#sysconfig ### 修改启动配置文件或创建新配置文件 方法1: systemctl edit elasticsearch 方法2: vim /usr/lib/systemd/system/elasticsearch.service ### 增加如下参数 [Service] LimitMEMLOCK=infinity ### 重新启动 systemctl daemon-reload systemctl restart elasticsearch Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-05 15:16:29 var className='atoc';"},"ES/API.html":{"url":"ES/API.html","title":"API","keywords":"","body":"Elasticsearch-API 增删改查: 插入数据不需要提前创建好数据库 index -- 库 type -- 表 filter -- 字段 默认随机生成_ID -- 唯一键ID 增 创建索引 curl -XPUT 'localhost:9200/vipinfo?pretty' { \"acknowledged\" : true, \"shards_acknowledged\" : true, \"index\" : ”vipinfo\" } 插入文本 curl -XPUT 'localhost:9200/vipinfo/user/1?pretty' -H 'Content-Type: application/json' -d' { \"first_name\" : \"John\", \"last_name\": \"Smith\", \"age\" : 25, \"about\" : \"I love to go rock climbing\", \"interests\": [ \"sports\", \"music\" ] }' curl -XPUT 'localhost:9200/vipinfo/user/2?pretty' -H 'Content-Type: application/json' -d' { \"first_name\": \"Jane\", \"last_name\" : \"Smith\", \"age\" : 32, \"about\" : \"I like to collect rock albums\", \"interests\": [ \"music\" ] }' curl –XPUT 'localhost:9200/vipinfo/user/3?pretty' -H 'Content-Type: application/json' -d' { \"first_name\": \"Douglas\", \"last_name\" : \"Fir\", \"age\" : 35, \"about\": \"I like to build cabinets\", \"interests\": [ \"forestry\" ] }' 删 curl -XDELETE 'localhost:9200/vipinfo/user/1?pretty' { \"_index\" : \"vipinfo\", \"_type\" : \"user\", \"_id\" : \"1\", \"_version\" : 2, \"result\" : \"deleted\", \"_shards\" : { \"total\" : 2, \"successful\" : 1, \"failed\" : 0 }, \"_seq_no\" : 1, \"_primary_term\" : 2 } # 删除索引 curl -XDELETE 'localhost:9200/vipinfo?pretty' { \"acknowledged\" : true } 改 curl -XPUT 'localhost:9200/vipinfo/user/1?pretty' -H 'Content-Type: application/json' -d' { \"first_name\" : \"John\", \"last_name\": \"Smith\", \"age\" : 27, \"about\" : \"I love to go rock climbing\", \"interests\": [ \"sports\", \"music\" ] } { \"_index\" : \"vipinfo\", \"_type\" : \"user\", \"_id\" : \"1\", \"_version\" : 2, \"result\" : \"updated\", \"_shards\" : { \"total\" : 2, \"successful\" : 1, \"failed\" : 0 }, \"_seq_no\" : 1, \"_primary_term\" : 1 } # 注意该种方法会将全部的内容全部删除掉 curl -XPOST 'localhost:9200/vipinfo/user/1?pretty' -H 'Content-Type: application/json' -d' { \"age\" : 29 }' 查 查询全部 curl -XGET localhost:9200/vipinfo/user/_search?pretty 查询指定文档 curl -XGET 'localhost:9200/vipinfo/user/1?pretty' 查询不到返回 false curl -XGET 'localhost:9200/vipinfo/user/32?pretty' { \"_index\" : \"vipinfo\", \"_type\" : \"user\", \"_id\" : \"32\", \"found\" : false } 条件查询 curl -XGET 'localhost:9200/vipinfo/user/_search?q=last_name:Smith&pretty' curl -XGET 'localhost:9200/vipinfo/user/_search?pretty' -H 'Content-Type: application/json' -d' { \"query\" : { \"match\" : { \"last_name\" : \"Smith\" } } }' curl -XGET 'localhost:9200/vipinfo/user/_search?pretty' -H 'Content-Type: application/json' -d'{ \"query\" : { \"bool\": { \"must\": { \"match\" : { \"last_name\" : \"smith\" } }, \"filter\": { \"range\" : {\"age\" : { \"gt\" : 30 } } } } } }' Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-05 15:18:09 var className='atoc';"},"ES/colony.html":{"url":"ES/colony.html","title":"集群","keywords":"","body":"Elasticsearch 集群 官网地址：https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html Elasticsearch 可以横向扩展至数百(甚至数千)的服务器节点，同时可以处理PB级数据 Elasticsearch 天生就是分布式的，并且在设计时屏蔽了分布式的复杂性。\u000bElasticsearch 尽可能地屏蔽了分布式系统的复杂性。 这里列举了一些在后台自动执行的操作: 分配文档到不同的容器 或 分片中,文档可以储存在一个或多个节点中 按集群节点来均衡分配这些分片，从而对索引和搜索过程进行负载均衡 复制每个分片以支持数据冗余，从而防止硬件故障导致的数据丢失 将集群中任一节点的请求路由到存有相关数据的节点 集群扩容时无缝整合新节点，重新分配分片以便从离群节点恢复 一个运行中的 Elasticsearch 实例称为一个 节点，而集群是由一个或者多个拥有相同 cluster.name 配置的节点组成,它们共同承担数据和负载的压力。 当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。 当一个节点被选举成为主节点时,它将负责管理集群范围内的所有变更,例如增加、删除索引,或者增加、删除节点等.而主节点并不需要涉及到文档级别的变更和搜索等操作,所以当集群只拥有一个主节点的情况下,即使流量的增加它也不会成为瓶颈.任何节点都可以成为主节点。我们的示例集群就只有一个节点,所以它同时也成为了主节点。 作为用户,我们可以将请求发送到 集群中的任何节点,包括主节点.每个节点都知道任意文档所处的位置,并且能够将我们的请求直接转发到存储我们所需文档的节点.无论我们将请求发送到哪个节点,它都能负责从各个包含我们所需文档的节点收集回数据,并将最终结果返回給客户端. Elasticsearch 对这一切的管理都是透明的。 安装 elasticsearch的集群安装方法和单节点的安装方法基本相同，唯一不同的是在集群中的配置文件 主节点配置 grep \"^[a-Z]\" /etc/elasticsearch/elasticsearch.yml cluster.name: Linux #集群名称，同一个集群内所有节点集群名称要一模一样 node.name: node-1 #节点名称，同一个集群内所有节点的节点名称不能重复 path.data: /data/elasticsearch #数据目录 path.logs: /var/log/elasticsearch #日志目录 bootstrap.memory_lock: true #内存锁定 network.host: 192.168.8.106,127.0.0.1 #绑定监听地址 http.port: 9200 #默认端口号 discovery.zen.ping.unicast.hosts: [\"192.168.8.106\", \"192.168.8.105\"] #集群发现节点配置 discovery.zen.minimum_master_nodes: 2 #选项相关参数,有公式 master/2 +1 从节点配置 cluster.name: Linux node.name: node-2 path.data: /data/elasticsearch path.logs: /var/log/elasticsearch bootstrap.memory_lock: true network.host: 192.168.8.105,127.0.0.1 http.port: 9200 discovery.zen.ping.unicast.hosts: [\"192.168.8.106\",\"192.168.8.105\"] discovery.zen.minimum_master_nodes: 2 http.cors.enabled: true http.cors.allow-origin: \"*\" 集群的组件介绍 注意事项 默认自己就是一个集群，默认的集群名称为:elasticsearch 集群状态颜色： 绿色 : 所有条件都满足，数据完整，副本满足 黄色 : 数据完整，副本不满足红色 : 有索引里的数据出现不完整了 紫色 : 有分片正在同步中 集群默认的日志是以集群名称命名 tail -f /var/log/elasticsearch/Linux.log 集群查询 查看集群信息 curl -XGET 'http://localhost:9200/_cluster/health?pretty' { \"cluster_name\" : \"Linux\", \"status\" : \"green\", \"timed_out\" : false, \"number_of_nodes\" : 2, \"number_of_data_nodes\" : 2, \"active_primary_shards\" : 5, \"active_shards\" : 10, \"relocating_shards\" : 0, \"initializing_shards\" : 0, \"unassigned_shards\" : 0, \"delayed_unassigned_shards\" : 0, \"number_of_pending_tasks\" : 0, \"number_of_in_flight_fetch\" : 0, \"task_max_waiting_in_queue_millis\" : 0, \"active_shards_percent_as_number\" : 100.0 } status 字段是我们最关心的。 green 所有的主分片和副本分片都正常运行。 yellow 所有的主分片都正常运行，但不是所有的副本分片都正常运行。 red 有主分片没能正常运行。 查看检索信息 https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-stats.html curl -XGET 'http://localhost:9200/_cluster/health?pretty' 集群设置 https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-get-settings.html curl -XGET 'http://localhost:9200/_cluster/settings?include_defaults=true&human&pretty' 集群节点状态 https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-info.html curl -XGET 'http://localhost:9200/_nodes/procese?human&pretty' curl -XGET 'http://localhost:9200/_nodes/_all/info/jvm,process?human&pretty' curl -XGET 'http://localhost:9200/_cat/nodes?human&pretty' 集群节点个数 curl -s -XGET 'http://localhost:9200/_cat/nodes?human&pretty' | wc -l 集群分裂 概念：当主集群中的主节点与从节点是跨机房连接的时候，如果在这个时候发生了网络故障导致了集群断开连接，该种现象为集群分裂的现象。如果集群中有的节点数据丢失，在修复集群达到了正常后，会自动的拷贝数据。并且注意的是此时两个集群会变成独立的集群。 集群故障修复 在发生了集群故障以后，两个数据库各自独立，此时如果在两台节点上各自插入不同的数据的时候，会产生什么现象？ 当两个节点，master设置为2的时候，一台出现了故障导致集群不可用 解决方案： 把还存活的节点的配置文件集群选举相关的选项注释掉或者改成1 discovery.zen.minimum_master_nodes: 1 结论： 两个节点数据不一致会导致查询结果不一致 找出不一致的数据,清空一个节点,以另一个节点的数据为准 然后手动插入修改后的数据 集群的分片与副本 增加第三台节点 cluster.name: Linux #集群名称，一个集群内所有节点要一样 node.name: node-3 path.data: /data/elasticsearch path.logs: /var/log/elasticsearch bootstrap.memory_lock: true network.host: 192.168.8.104,127.0.0.1 http.port: 9200 discovery.zen.ping.unicast.hosts: [\"192.168.8.106\",\"192.168.8.104\"] discovery.zen.minimum_master_nodes: 2 http.cors.enabled: true http.cors.allow-origin: \"*\" 默认的数据规则 5分片一个副本 集群分片与副本插入数据 插入默认数据 curl -XPUT 'localhost:9200/index1?pretty' { \"acknowledged\" : true, \"shards_acknowledged\" : true, \"index\" : \"index1\" } 指定分片和副本 curl -XPUT 'localhost:9200/index2?pretty' -H 'Content-Type: application/json' -d' { \"settings\" : { \"number_of_shards\" : 3, \"number_of_replicas\" : 1 } }' number_of_replicas 是数据备份数，如果只有一台机器，设置为0 number_of_shards 是数据分片数，默认为5，有时候设置为3 注意：分片数一旦创建就不能再更改了，但是我们可以调整副本数 curl -XPUT 'localhost:9200/index2/_settings?pretty' -H 'Content-Type: application/json' -d' { \"settings\" : { \"number_of_replicas\" : 3 } }' Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-05 15:21:58 var className='atoc';"},"ELK/introduce.html":{"url":"ELK/introduce.html","title":"ELK","keywords":"","body":"Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-02 09:47:39 var className='atoc';"},"ELK/elk_nginx.html":{"url":"ELK/elk_nginx.html","title":"Elk-nginx","keywords":"","body":"ELK-nginx 环境准备 # 192.168.8.106 ES # 存储日志 Kibana # 画图展示 nginx # nginx # 192.168.8.105 nginx filebeat 采集日志 # 设置时间同步 ansible docker -m yum -a \"name=ntpdate state=installed\" # 被监控主机安装 yum install httpd-tools -y # 产生一些日志 ab -c 100 -n 100 192.168.8.105/ 软件下载安装 下载 wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.6.0.rpm wget https://artifacts.elastic.co/downloads/kibana/kibana-6.6.0-x86_64.rpm wget https://artifacts.elastic.co/downloads/logstash/logstash-6.6.0.rpm wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.6.0-x86_64.rpm 安装 kibana # 192.168.8.106 rpm -ivh kibana-6.6.0-x86_64.rpm rpm -qc kibana /etc/kibana/kibana.yml # 配置文件 grep \"^[a-Z]\" /etc/kibana/kibana.yml server.port: 5601 server.host: \"192.168.8.106\" server.name: \"db01\" elasticsearch.hosts: [\"http://192.168.8.106:9200\"] kibana.index: \".kibana\" # 启动 systemctl start kibana systemctl enble kibana filebeat # 192.168.8.106/105 rpm -ivh filebeat-6.6.0-x86_64.rpm rpm -qc filebeat /etc/filebeat/filebeat.yml # 配置文件 egrep -v \"#|^$\" /etc/filebeat/filebeat.yml filebeat.inputs: - type: log enabled: true paths: - /var/log/nginx/access.log filebeat.config.modules: path: ${path.config}/modules.d/*.yml reload.enabled: false setup.template.settings: index.number_of_shards: 3 setup.kibana: output.elasticsearch: hosts: [\"192.168.8.106:9200\"] processors: - add_host_metadata: ~ - add_cloud_metadata: ~ # 重启filebeat systemctl start filebeat systemctl enble filebeat ES node.name: node-1 path.data: /data/elasticsearch path.logs: /var/log/elasticsearch network.host: 192.168.8.106,127.0.0.1 http.port: 9200 Kibana展示 ELK-Nginx-json 将Nginx改为json格式 配置ngxin的日志显示json log_format json '{ \"time_local\": \"$time_local\", ' '\"remote_addr\": \"$remote_addr\", ' '\"referer\": \"$http_referer\", ' '\"request\": \"$request\", ' '\"status\": $status, ' '\"bytes\": $body_bytes_sent, ' '\"agent\": \"$http_user_agent\", ' '\"x_forwarded\": \"$http_x_forwarded_for\", ' '\"up_addr\": \"$upstream_addr\",' '\"up_host\": \"$upstream_http_host\",' '\"upstream_time\": \"$upstream_response_time\",' '\"request_time\": \"$request_time\"' ' }'; 修改filebeat的配置文件 filebeat.inputs: - type: log enabled: true paths: - /var/log/nginx/access.log json.keys_under_root: true ## 增加该两条参数 json.overwrite_keys: true ## 增加上述的两条参数 filebeat.config.modules: path: ${path.config}/modules.d/*.yml reload.enabled: false setup.template.settings: index.number_of_shards: 3 setup.kibana: output.elasticsearch: hosts: [\"192.168.8.106:9200\"] index: \"nginx_access-%{[beat.version]}-%{+yyyy.MM}\" # 配置自己的模板索引注意bean setup.template.name: \"nginx\" setup.template.pattern: \"nginx_*\" setup.template.enabled: false # 关闭官方模板 setup.template.overwrite: true 同时监控nginx错误日志 修改filebeat.yml的配置文件 filebeat.inputs: - type: log enabled: true paths: - /var/log/nginx/access.log json.keys_under_root: true json.overwrite_keys: true - type: log enabled: true paths: - /var/log/nginx/error.log json.keys_under_root: true json.overwrite_keys: true filebeat.config.modules: path: ${path.config}/modules.d/*.yml reload.enabled: false setup.template.settings: index.number_of_shards: 3 setup.kibana: output.elasticsearch: hosts: [\"192.168.8.106:9200\"] index: \"nginx_access-%{[beat.version]}-%{+yyyy.MM}\" setup.template.name: \"nginx\" setup.template.pattern: \"nginx_*\" setup.template.enabled: false etup.template.overwrite: true ##### vim 小技巧 ：2,7t8 将2行到第7行复制到第8行 m8 移动到第8行 Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-05 15:24:15 var className='atoc';"},"Redis/introduce.html":{"url":"Redis/introduce.html","title":"Redis","keywords":"","body":"introduce.md Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-02 09:49:22 var className='atoc';"},"Redis/install.html":{"url":"Redis/install.html","title":"安装","keywords":"","body":"安装 下载软件 mkdir /data/soft -p wget -O /data/soft/redis-3.2.9.tar.gz http://download.redis.io/releases/redis-3.2.9.tar.gz 目录结构 mkdir /opt/redis_cluster/redis_6379/{conf,logs,pid} -p redis_cluster/ └── redis_6379 ├── conf -- 配置文件 ├── logs -- 日志 └── pid -- 进程 解压 tar zxvf redis-3.2.9.tar.gz -C /opt/redis_cluster/ 创建软连接 ln -s /opt/redis_cluster/redis-3.2.9/ /opt/redis_cluster/redis 安装 cd /opt/redis_cluster/redis make && make install ll /usr/local/bin/ total 15052 -rwxr-xr-x. 1 root root 2432016 Apr 24 20:29 redis-benchmark -rwxr-xr-x. 1 root root 25088 Apr 24 20:29 redis-check-aof -rwxr-xr-x. 1 root root 5180928 Apr 24 20:29 redis-check-rdb -rwxr-xr-x. 1 root root 2584968 Apr 24 20:29 redis-cli lrwxrwxrwx. 1 root root 12 Apr 24 20:29 redis-sentinel -> redis-server -rwxr-xr-x. 1 root root 5180928 Apr 24 20:29 redis-server Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-05 15:28:06 var className='atoc';"},"Redis/config.html":{"url":"Redis/config.html","title":"配置","keywords":"","body":"配置 vim /opt/redis_cluster/redis_6379/conf/redis_6379.conf ### 以守护进行模式启动 daemonize yes ### 绑定主机ip地址 bind 192.168.8.105 ### 监听端口 port 6379 ### pid文件存放位置 pidfile /opt/redis_cluster/redis_6379/pid/redis_6379.pid ### log文件存放位置 logfile /opt/redis_cluster/redis_6379/logs/redis_6379.log ### 设置数据库的数量 databases 16 ### 指定本地持久化文件的文件名,默认为dump.rdb dbfilename redis_6379.rdb # 启动服务 ps -ef | grep redis root 107878 00:00:00 /usr/local/bin/redis-server 127.0.0.1:6379 root 111025 00:00:00 redis-server 192.168.8.104:6379 # 启动redis redis-cli -h 192.168.8.104 # 查看redis的安装目录 1. 查看redis的进程号 xxxx ps -ef | grep redis 2. 执行以下指令 ls -l /proc/xxxx/cwd Copyright © dsx2016.com 2019 all right reserved，powered by Gitbook该文章修订时间： 2020-05-05 15:28:40 var className='atoc';"}}